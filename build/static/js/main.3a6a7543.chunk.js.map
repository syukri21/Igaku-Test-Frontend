{"version":3,"sources":["routes.tsx","components/GlobalSnackbar/GlobalSnackbar.tsx","components/GlobalSnackbar/globalSnackbar.handler.ts","App.tsx","serviceWorker.ts","index.tsx","components/GlobalSnackbar/globalSnackbar.provider.ts","api/api.ts"],"names":["Login","React","lazy","routes","Component","Loading","exact","path","Protected","GlobalSnackbar","props","useGlobal","globalSnackbar","handleClose","setGlobalSnackbar","useGlobalSnackbar","isOpen","data","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","Alert","elevation","variant","severity","browserHistory","createBrowserHistory","App","CssBaseline","history","map","route","key","protect","hasToken","Api","getToken","render","matchProps","to","Suspense","fallback","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","INITIAL_STATE","createProvider","type","payload","getDispatch","name","method","val","addReducer","global","_","apiUrl","process","token","localStorage","getItem","this","setItem","params","axiosRequestConfig","baseURL","headers","Authorization","axios","create","instance","getInstance"],"mappings":"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","file":"static/js/main.3a6a7543.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n// const Settings = React.lazy(() => import(\"../Pages/Settings/Settings\"))\r\nconst Login = React.lazy(() => import(\"./pages/login\"))\r\nconst Register = React.lazy(() => import(\"./pages/register\"))\r\nconst Todo = React.lazy(() => import(\"./pages/todo\"))\r\n\r\nexport interface RouteRedirect {\r\n    roleId: number\r\n    to: string\r\n}\r\n\r\nexport interface IRoute {\r\n    Component: ((props: any) => JSX.Element) | React.SFC<any>\r\n    Loading: ((props: any) => JSX.Element) | React.SFC<any> | null\r\n    exact: boolean\r\n    path: string\r\n    Protected: boolean\r\n    redirect?: RouteRedirect[]\r\n}\r\n\r\nconst routes: IRoute[] = [\r\n    {\r\n        Component: Register,\r\n        Loading: null,\r\n        exact: true,\r\n        path: \"/register\",\r\n        Protected: false,\r\n    },\r\n    {\r\n        Component: Login,\r\n        Loading: null,\r\n        exact: true,\r\n        path: \"/login\",\r\n        Protected: false,\r\n    },\r\n    {\r\n        Component: Todo,\r\n        Loading: null,\r\n        exact: true,\r\n        path: \"/todo\",\r\n        Protected: true,\r\n    },\r\n    {\r\n        Component: Login,\r\n        Loading: null,\r\n        exact: false,\r\n        path: \"/\",\r\n        Protected: false,\r\n    },\r\n]\r\n\r\nexport default routes\r\n","import * as React from \"react\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\"\r\nimport useGlobalSnackbar from \"./globalSnackbar.handler\"\r\nimport Alert from \"@material-ui/lab/Alert\"\r\n\r\nexport interface GlobalSnackbarProps {}\r\n\r\nconst GlobalSnackbar: React.SFC<GlobalSnackbarProps> = (props) => {\r\n    const { isOpen, handleClose, data } = useGlobalSnackbar()\r\n\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{\r\n                vertical: \"bottom\",\r\n                horizontal: \"right\",\r\n            }}\r\n            open={isOpen}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n            message={data.message}\r\n        >\r\n            <Alert elevation={6} variant='filled' {...props} onClose={handleClose} severity={data.severity}>\r\n                {data.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default GlobalSnackbar\r\n","import GlobalSnackbar, { setGlobalSnackbar } from \"./globalSnackbar.provider\"\r\n\r\nexport interface UseGlobalSnackbar {\r\n    isOpen: boolean\r\n    data: any\r\n    handleClose: () => void\r\n}\r\n\r\nexport default function useGlobalSnackbar(): UseGlobalSnackbar {\r\n    const [globalSnackbar] = GlobalSnackbar.useGlobal()\r\n\r\n    function handleClose() {\r\n        setGlobalSnackbar(\"HIDE\")\r\n    }\r\n\r\n    return { ...globalSnackbar, handleClose }\r\n}\r\n","import React from \"react\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport { Router, Switch } from \"react-router-dom\"\nimport { createBrowserHistory } from \"history\"\nimport { IRoute } from \"./routes\"\nimport routes from \"./routes\"\nimport { Route, Redirect } from \"react-router-dom\"\nimport GlobalSnackbar from \"./components/GlobalSnackbar/GlobalSnackbar\"\nimport Api from \"./api/api\"\n\nconst browserHistory = createBrowserHistory()\n\nfunction App() {\n    return (\n        <>\n            <CssBaseline />\n            <Router history={browserHistory}>\n                <Switch>\n                    {routes.map((route: IRoute, key: number) => {\n                        const Component = route.Component\n                        const Loading = route.Loading\n                        const protect = route.Protected\n                        const path = route.path\n                        const hasToken = !!Api.getToken()\n                        return (\n                            <Route\n                                key={key}\n                                path={path}\n                                render={(matchProps) => {\n                                    if (protect && !hasToken) return <Redirect to='/login'></Redirect>\n                                    return (\n                                        <React.Suspense fallback={Loading}>\n                                            <Component {...matchProps} />\n                                        </React.Suspense>\n                                    )\n                                }}\n                            />\n                        )\n                    })}\n                </Switch>\n            </Router>\n            <GlobalSnackbar></GlobalSnackbar>\n        </>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createProvider } from \"reactn\"\r\n\r\nexport const defaultStateObj = {\r\n    isOpen: false,\r\n    data: {},\r\n}\r\n\r\nconst reducers = [{ name: \"GlobalSnackbar\", method: \"set\" }]\r\nconst INITIAL_STATE = defaultStateObj\r\nconst GlobalSnackbar = createProvider(INITIAL_STATE)\r\n\r\nreducers.map((val) => {\r\n    return GlobalSnackbar.addReducer(val.method + val.name, (global: any, _, type, payload) => {\r\n        switch (type) {\r\n            case \"SHOW\":\r\n                global.isOpen = true\r\n                global.data = payload\r\n                break\r\n            case \"HIDE\":\r\n                global.isOpen = false\r\n                break\r\n        }\r\n        return global\r\n    })\r\n})\r\n\r\ntype GlobalSnackbarType = \"SHOW\" | \"HIDE\"\r\ntype severity = \"success\" | \"error\" | \"warning\" | undefined\r\n\r\ninterface Payload {\r\n    message: string\r\n    severity: severity\r\n}\r\n\r\nexport function setGlobalSnackbar(type: GlobalSnackbarType, payload?: Payload) {\r\n    const dispatch = GlobalSnackbar.getDispatch()\r\n    dispatch.setGlobalSnackbar(type, payload)\r\n}\r\n\r\nexport default GlobalSnackbar\r\n","import axios, { AxiosRequestConfig } from \"axios\"\r\n\r\nclass Api {\r\n    private static instance: Api\r\n    private apiUrl: string | undefined = process.env.REACT_APP_API_URI\r\n    private token?: string | null\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): Api {\r\n        if (!Api.instance) {\r\n            Api.instance = new Api()\r\n        }\r\n\r\n        return Api.instance\r\n    }\r\n\r\n    public getToken() {\r\n        if (window) {\r\n            const token = localStorage.getItem(\"token\")\r\n            if (token) this.token = token\r\n        }\r\n\r\n        return this.token\r\n    }\r\n\r\n    public setToken(token: string) {\r\n        if (window) window.localStorage.setItem(\"token\", token)\r\n    }\r\n\r\n    public fetch(params: any) {\r\n        const axiosRequestConfig: AxiosRequestConfig = {\r\n            baseURL: this.apiUrl,\r\n        }\r\n        const token = localStorage.getItem(\"token\")\r\n        if (token) {\r\n            axiosRequestConfig.headers = { Authorization: `Bearer ${token}` }\r\n        }\r\n        return axios.create(axiosRequestConfig)(params)\r\n    }\r\n}\r\n\r\nexport default Api.getInstance()\r\n"],"sourceRoot":""}