{"version":3,"sources":["pages/todo/providers/todo-getAll.provider.ts","pages/todo/providers/todo-delete-ids.provider.ts","pages/todo/providers/todo-edit.provider.ts","pages/todo/components/todoTable.handler.ts","pages/todo/components/TodoTable.tsx","pages/todo/providers/todo-create.provider.ts","pages/todo/components/todoForm.handler.ts","pages/todo/components/TodoForm.tsx","pages/todo/providers/todo-delete.provider.ts","pages/todo/providers/user-active.provider.ts","pages/todo/todo.provider.ts","pages/todo/Todo.tsx"],"names":["TodoGetAll","createProvider","loading","error","data","getTodos","a","dispatch","getDispatch","Api","fetch","method","url","result","addReducer","global","_","type","payload","TodoDeleteIds","ids","TodoEdit","message","editTodo","useTodoTable","useGlobal","todosState","deleteIds","setDeleteIds","useState","editId","setEditId","editData","setEditData","handleCheck","id","Set","add","newIds","Array","from","handleChangeCheck","event","target","checked","delete","handleUnCheck","handleChangeSwitch","status","handleChangeTask","task","value","handleSubmitEdit","todoEdit","then","setGlobalSnackbar","severity","useStyles","makeStyles","table","minWidth","TodoTable","classes","TableContainer","component","Table","className","aria-label","size","TableHead","TableRow","TableCell","padding","align","TableBody","map","todo","key","Checkbox","color","onChange","scope","TextField","defaultValue","name","fullWidth","Switch","defaultChecked","inputProps","Typography","IconButton","onClick","TodoCreate","createTodo","initialValues","validationSchema","Yup","shape","required","useTodoForm","formik","useFormik","onSubmit","values","resetForm","TodoForm","props","FormControl","variant","InputLabel","htmlFor","OutlinedInput","handleChange","onKeyPress","which","keyCode","handleSubmit","aria-describedby","endAdornment","Button","preventDefault","labelWidth","TodoDelete","deleteTodo","UserActive","firstName","lastName","email","password","created_at","Date","updated_at","getUser","useTodo","deleteIdsState","todoDeleteState","userActiveState","useEffect","catch","window","localStorage","clear","location","reload","handleDelete","length","user","theme","root","spacing","bullet","display","margin","transform","title","fontSize","pos","marginBottom","menuButton","marginRight","appbar","flexGrow","appbarTitle","todoWrap","position","background","palette","primary","main","width","height","top","zIndex","containerTodo","paddingTop","cardHeader","alignItems","fieldTodo","paddingLeft","paddingRight","deleteWrapper","justifyContent","Todo","history","useHistory","AppBar","Toolbar","edge","charAt","toUpperCase","substr","e","removeItem","push","Container","maxWidth","Card","CardHeader","CardActions","CardContent","disabled","startIcon"],"mappings":"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","file":"static/js/8.3c4ce841.chunk.js","sourcesContent":["import { createProvider } from \"reactn\"\r\nimport Api from \"../../../api/api\"\r\nimport { TodosGetState } from \"../@types/todo.types\"\r\n\r\nconst TodoGetAll = createProvider<TodosGetState>({\r\n    loading: false,\r\n    error: null,\r\n    data: [],\r\n})\r\n\r\nTodoGetAll.addReducer(\"getTodos\", (global: any, _, type, payload) => {\r\n    switch (type) {\r\n        case \"LOADING\":\r\n            global.loading = true\r\n            break\r\n        case \"ERROR\":\r\n            global.loading = false\r\n            global.error = payload\r\n            break\r\n        case \"SUCCESS\":\r\n            global.loading = false\r\n            global.error = null\r\n            global.data = payload\r\n            break\r\n    }\r\n    return global\r\n})\r\n\r\nexport async function getTodos() {\r\n    const dispatch = TodoGetAll.getDispatch()\r\n    try {\r\n        dispatch.getTodos(\"LOADING\")\r\n        const result = await Api.fetch({\r\n            method: \"GET\",\r\n            url: \"/todos\",\r\n        })\r\n        dispatch.getTodos(\"SUCCESS\", result.data)\r\n        return result.data\r\n    } catch (err) {\r\n        dispatch.getTodos(\"ERROR\")\r\n        throw err\r\n    }\r\n}\r\n\r\nexport default TodoGetAll\r\n","import { createProvider } from \"reactn\"\r\nimport { TodoDeleteParam } from \"../@types/todo.types\"\r\n\r\nconst TodoDeleteIds = createProvider<TodoDeleteParam>({\r\n    ids: [],\r\n})\r\n\r\nTodoDeleteIds.addReducer(\"handleIds\", (global: any, _, type, payload) => {\r\n    return payload\r\n})\r\n\r\nexport async function changeIds(data: TodoDeleteParam) {\r\n    const dispatch = TodoDeleteIds.getDispatch()\r\n    dispatch.handleIds(data)\r\n}\r\n\r\nexport default TodoDeleteIds\r\n","import { createProvider } from \"reactn\"\r\nimport Api from \"../../../api/api\"\r\nimport { TodoType, TodoEditState, TodoEditParam } from \"../@types/todo.types\"\r\n\r\nconst TodoEdit = createProvider<TodoEditState>({\r\n    loading: false,\r\n    error: null,\r\n    data: { message: \"\" },\r\n})\r\n\r\nTodoEdit.addReducer(\"editTodo\", (global: any, _, type, payload) => {\r\n    switch (type) {\r\n        case \"LOADING\":\r\n            global.loading = true\r\n            break\r\n        case \"ERROR\":\r\n            global.loading = false\r\n            global.error = payload\r\n            break\r\n        case \"SUCCESS\":\r\n            global.loading = false\r\n            global.error = null\r\n            global.data = payload\r\n            break\r\n    }\r\n    return global\r\n})\r\n\r\nexport async function todoEdit(data: TodoEditParam) {\r\n    const dispatch = TodoEdit.getDispatch()\r\n    try {\r\n        dispatch.editTodo(\"LOADING\")\r\n        const result = await Api.fetch({\r\n            method: \"PATCH\",\r\n            url: \"/todos\",\r\n            data,\r\n        })\r\n        dispatch.editTodo(\"SUCCESS\", result.data)\r\n        return result.data\r\n    } catch (err) {\r\n        dispatch.editTodo(\"ERROR\")\r\n        throw err\r\n    }\r\n}\r\n\r\nexport default TodoEdit\r\n","import TodoGetAll, { getTodos } from \"../providers/todo-getAll.provider\"\r\nimport TodoDeleteIds from \"../providers/todo-delete-ids.provider\"\r\nimport { useState } from \"reactn\"\r\nimport { todoEdit } from \"../providers/todo-edit.provider\"\r\nimport { setGlobalSnackbar } from \"../../../components/GlobalSnackbar/globalSnackbar.provider\"\r\n\r\nexport default function useTodoTable() {\r\n    const [todosState] = TodoGetAll.useGlobal()\r\n    const [deleteIds, setDeleteIds] = TodoDeleteIds.useGlobal()\r\n    const [editId, setEditId] = useState<number | null>()\r\n    const [editData, setEditData] = useState<any>()\r\n\r\n    function handleCheck(id: number) {\r\n        const ids = new Set(deleteIds.ids)\r\n        ids.add(id)\r\n        const newIds = Array.from(ids)\r\n        setDeleteIds({ ids: newIds })\r\n    }\r\n\r\n    function handleUnCheck(id: number) {\r\n        const ids = new Set(deleteIds.ids)\r\n        ids.delete(id)\r\n        const newIds = Array.from(ids)\r\n        setDeleteIds({ ids: newIds })\r\n    }\r\n\r\n    function handleChangeCheck(id: number) {\r\n        return function (event: any) {\r\n            const checked = event.target.checked\r\n            if (checked) {\r\n                handleCheck(id)\r\n            } else {\r\n                handleUnCheck(id)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleChangeSwitch(event: any) {\r\n        setEditData({\r\n            ...editData,\r\n            status: event.target.checked,\r\n        })\r\n    }\r\n    function handleChangeTask(event: any) {\r\n        setEditData({\r\n            ...editData,\r\n            task: event.target.value,\r\n        })\r\n    }\r\n    function handleSubmitEdit() {\r\n        if (editId) {\r\n            todoEdit({\r\n                id: editId,\r\n                status: editData.status,\r\n                task: editData.task,\r\n            }).then(() => {\r\n                getTodos().then(() => {\r\n                    setGlobalSnackbar(\"SHOW\", {\r\n                        message: `Success edit 1 item`,\r\n                        severity: \"success\",\r\n                    })\r\n                    setEditId(null)\r\n                    setEditData({})\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    return { todosState, handleCheck, handleChangeCheck, editId, setEditId, handleChangeSwitch, handleChangeTask, handleSubmitEdit }\r\n}\r\n","import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport Table from \"@material-ui/core/Table\"\r\nimport TableBody from \"@material-ui/core/TableBody\"\r\nimport TableCell from \"@material-ui/core/TableCell\"\r\nimport TableContainer from \"@material-ui/core/TableContainer\"\r\nimport TableHead from \"@material-ui/core/TableHead\"\r\nimport TableRow from \"@material-ui/core/TableRow\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\nimport EditIcon from \"@material-ui/icons/Edit\"\r\nimport SaveIcon from \"@material-ui/icons/Save\"\r\n\r\nimport { Checkbox, IconButton, Typography, Button, Switch } from \"@material-ui/core\"\r\nimport TodoGetAll from \"../providers/todo-getAll.provider\"\r\nimport { TodoType } from \"../@types/todo.types\"\r\nimport useTodoTable from \"./todoTable.handler\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n})\r\n\r\nexport default function TodoTable() {\r\n    const classes = useStyles()\r\n    const { todosState, editId, handleChangeCheck, setEditId, handleSubmitEdit, handleChangeSwitch, handleChangeTask } = useTodoTable()\r\n\r\n    return (\r\n        <TableContainer component={\"div\"}>\r\n            <Table className={classes.table} aria-label='simple table' size='small'>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell size='small' padding='checkbox'></TableCell>\r\n                        <TableCell>Task Name</TableCell>\r\n                        <TableCell align='center' size='small'>\r\n                            Status\r\n                        </TableCell>\r\n                        <TableCell size='small' padding='checkbox'></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {todosState.data &&\r\n                        todosState.data.map((todo: TodoType) => (\r\n                            <TableRow key={todo.id}>\r\n                                <TableCell padding='checkbox' size='small'>\r\n                                    <Checkbox color='primary' onChange={handleChangeCheck(todo.id)}></Checkbox>\r\n                                </TableCell>\r\n                                <TableCell component='th' scope='row'>\r\n                                    {editId === todo.id ? (\r\n                                        <TextField\r\n                                            defaultValue={todo.task}\r\n                                            name='task-edit'\r\n                                            id='task-edit'\r\n                                            fullWidth\r\n                                            onChange={handleChangeTask}\r\n                                        ></TextField>\r\n                                    ) : (\r\n                                        todo.task\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell align='center' size='small'>\r\n                                    {editId === todo.id ? (\r\n                                        <Switch\r\n                                            color='primary'\r\n                                            defaultChecked={todo.status}\r\n                                            name='checkedB'\r\n                                            onChange={handleChangeSwitch}\r\n                                            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                                        />\r\n                                    ) : todo.status ? (\r\n                                        <Typography color='primary'>active</Typography>\r\n                                    ) : (\r\n                                        <Typography color='textPrimary'>completed</Typography>\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell padding='checkbox' size='small'>\r\n                                    {editId === todo.id ? (\r\n                                        <IconButton color='primary' onClick={handleSubmitEdit}>\r\n                                            <SaveIcon></SaveIcon>\r\n                                        </IconButton>\r\n                                    ) : (\r\n                                        <IconButton color='primary' onClick={() => setEditId(todo.id)}>\r\n                                            <EditIcon></EditIcon>\r\n                                        </IconButton>\r\n                                    )}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n","import { createProvider } from \"reactn\"\r\nimport Api from \"../../../api/api\"\r\nimport { TodoCreateState, TodoCreateParam } from \"../@types/todo.types\"\r\n\r\nconst TodoCreate = createProvider<TodoCreateState>()\r\n\r\nTodoCreate.addReducer(\"createTodo\", (global: any, _, type, payload) => {\r\n    switch (type) {\r\n        case \"LOADING\":\r\n            global.loading = true\r\n            break\r\n        case \"ERROR\":\r\n            global.loading = false\r\n            global.error = payload\r\n            break\r\n        case \"SUCCESS\":\r\n            global.loading = false\r\n            global.error = null\r\n            global.data = payload\r\n            break\r\n    }\r\n    return global\r\n})\r\n\r\nexport async function createTodo(data: TodoCreateParam) {\r\n    const dispatch = TodoCreate.getDispatch()\r\n    try {\r\n        dispatch.createTodo(\"LOADING\")\r\n        const result = await Api.fetch({\r\n            method: \"POST\",\r\n            url: \"/todos\",\r\n            data,\r\n        })\r\n        dispatch.createTodo(\"SUCCESS\", result.data)\r\n        return result.data\r\n    } catch (err) {\r\n        dispatch.createTodo(\"ERROR\")\r\n        throw err\r\n    }\r\n}\r\n\r\nexport default TodoCreate\r\n","import { TodoCreateParam } from \"../@types/todo.types\"\r\nimport { useFormik } from \"formik\"\r\nimport * as Yup from \"yup\"\r\nimport { createTodo } from \"../providers/todo-create.provider\"\r\nimport { getTodos } from \"../providers/todo-getAll.provider\"\r\nimport { setGlobalSnackbar } from \"../../../components/GlobalSnackbar/globalSnackbar.provider\"\r\n\r\nconst initialValues: TodoCreateParam = {\r\n    task: \"\",\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    task: Yup.string().required(),\r\n})\r\n\r\nexport default function useTodoForm() {\r\n    const formik = useFormik({\r\n        validationSchema,\r\n        initialValues,\r\n        onSubmit: (values) => {\r\n            createTodo(values).then(() => {\r\n                getTodos().then(() => {\r\n                    setGlobalSnackbar(\"SHOW\", {\r\n                        message: `Success add 1 item`,\r\n                        severity: \"success\",\r\n                    })\r\n                    formik.resetForm({\r\n                        values: initialValues,\r\n                    })\r\n                })\r\n            })\r\n        },\r\n    })\r\n\r\n    return { formik }\r\n}\r\n","import * as React from \"react\"\r\nimport { FormControl, InputLabel, OutlinedInput, Button } from \"@material-ui/core\"\r\nimport AddIcon from \"@material-ui/icons/Add\"\r\nimport useTodoForm from \"./todoForm.handler\"\r\n\r\nexport interface TodoFormProps {}\r\n\r\nconst TodoForm: React.SFC<TodoFormProps> = (props) => {\r\n    const { formik } = useTodoForm()\r\n    return (\r\n        <FormControl fullWidth variant='outlined'>\r\n            <InputLabel htmlFor='todo-input'>What needs to be done?</InputLabel>\r\n            <OutlinedInput\r\n                id='task'\r\n                name='task'\r\n                type='text'\r\n                onChange={formik.handleChange}\r\n                onKeyPress={(event: any) => {\r\n                    if (event.which === 13 || event.keyCode === 13) {\r\n                        formik.handleSubmit()\r\n                    }\r\n                }}\r\n                aria-describedby='standard-weight-helper-text'\r\n                inputProps={{\r\n                    \"aria-label\": \"weight\",\r\n                }}\r\n                value={formik.values.task}\r\n                endAdornment={\r\n                    <Button\r\n                        onClick={(event: any) => {\r\n                            event.preventDefault()\r\n                            formik.handleSubmit()\r\n                        }}\r\n                        type='button'\r\n                    >\r\n                        <AddIcon></AddIcon>\r\n                    </Button>\r\n                }\r\n                labelWidth={175}\r\n            ></OutlinedInput>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import { createProvider } from \"reactn\"\r\nimport Api from \"../../../api/api\"\r\nimport { TodoCreateState, TodoDeleteParam } from \"../@types/todo.types\"\r\n\r\nconst TodoDelete = createProvider<TodoCreateState>({\r\n    loading: false,\r\n    error: null,\r\n    data: { message: \"\" },\r\n})\r\n\r\nTodoDelete.addReducer(\"deleteTodo\", (global: any, _, type, payload) => {\r\n    switch (type) {\r\n        case \"LOADING\":\r\n            global.loading = true\r\n            break\r\n        case \"ERROR\":\r\n            global.loading = false\r\n            global.error = payload\r\n            break\r\n        case \"SUCCESS\":\r\n            global.loading = false\r\n            global.error = null\r\n            global.data = payload\r\n            break\r\n    }\r\n    return global\r\n})\r\n\r\nexport async function deleteTodo(data: TodoDeleteParam) {\r\n    const dispatch = TodoDelete.getDispatch()\r\n    try {\r\n        dispatch.deleteTodo(\"LOADING\")\r\n        const result = await Api.fetch({\r\n            method: \"DELETE\",\r\n            url: \"/todos\",\r\n            data,\r\n        })\r\n        dispatch.deleteTodo(\"SUCCESS\", result.data)\r\n        return result.data\r\n    } catch (err) {\r\n        dispatch.deleteTodo(\"ERROR\")\r\n        throw err\r\n    }\r\n}\r\n\r\nexport default TodoDelete\r\n","import { createProvider } from \"reactn\"\r\nimport Api from \"../../../api/api\"\r\nimport { UserState } from \"../@types/user.types\"\r\n\r\nconst UserActive = createProvider<UserState>({\r\n    loading: false,\r\n    error: null,\r\n    data: {\r\n        id: 0,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        created_at: new Date(),\r\n        updated_at: new Date(),\r\n    },\r\n})\r\n\r\nUserActive.addReducer(\"getUser\", (global: any, _, type, payload) => {\r\n    switch (type) {\r\n        case \"LOADING\":\r\n            global.loading = true\r\n            break\r\n        case \"ERROR\":\r\n            global.loading = false\r\n            global.error = payload\r\n            break\r\n        case \"SUCCESS\":\r\n            global.loading = false\r\n            global.error = null\r\n            global.data = payload\r\n            break\r\n    }\r\n    return global\r\n})\r\n\r\nexport async function getUser() {\r\n    const dispatch = UserActive.getDispatch()\r\n    try {\r\n        dispatch.getUser(\"LOADING\")\r\n        const result = await Api.fetch({\r\n            method: \"GET\",\r\n            url: \"/users/jwt\",\r\n        })\r\n        dispatch.getUser(\"SUCCESS\", result.data)\r\n        return result.data\r\n    } catch (err) {\r\n        dispatch.getUser(\"ERROR\")\r\n        throw err\r\n    }\r\n}\r\n\r\nexport default UserActive\r\n","import { useEffect } from \"react\"\r\nimport { getTodos } from \"./providers/todo-getAll.provider\"\r\nimport { setGlobalSnackbar } from \"../../components/GlobalSnackbar/globalSnackbar.provider\"\r\nimport TodoDelete, { deleteTodo } from \"./providers/todo-delete.provider\"\r\nimport TodoDeleteIds from \"./providers/todo-delete-ids.provider\"\r\nimport UserActive, { getUser } from \"./providers/user-active.provider\"\r\n\r\nexport default function useTodo() {\r\n    const [deleteIdsState, setDeleteIds] = TodoDeleteIds.useGlobal()\r\n    const [todoDeleteState] = TodoDelete.useGlobal()\r\n    const [userActiveState] = UserActive.useGlobal()\r\n\r\n    useEffect(() => {\r\n        getTodos()\r\n            .then((data) => {\r\n                getUser()\r\n            })\r\n            .catch(() => {\r\n                setGlobalSnackbar(\"SHOW\", {\r\n                    message: \"Token Expired!\",\r\n                    severity: \"error\",\r\n                })\r\n                window.localStorage.clear()\r\n                window.location.reload()\r\n            })\r\n    }, [])\r\n\r\n    function handleDelete() {\r\n        if (deleteIdsState.ids?.length === 0) {\r\n            return setGlobalSnackbar(\"SHOW\", {\r\n                message: `Choose one item!`,\r\n                severity: \"warning\",\r\n            })\r\n        }\r\n        deleteTodo({ ids: deleteIdsState.ids }).then(() => {\r\n            getTodos().then(() => {\r\n                setGlobalSnackbar(\"SHOW\", {\r\n                    message: `${deleteIdsState.ids?.length} items deleted`,\r\n                    severity: \"success\",\r\n                })\r\n                setDeleteIds({ ids: [] })\r\n            })\r\n        })\r\n    }\r\n\r\n    return { handleDelete, todoDeleteState, deleteIdsState, user: userActiveState }\r\n}\r\n","import * as React from \"react\"\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardActions from \"@material-ui/core/CardActions\"\r\nimport CardContent from \"@material-ui/core/CardContent\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport MenuIcon from \"@material-ui/icons/Alarm\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport { TodoTable } from \"./components\"\r\nimport { CardHeader } from \"@material-ui/core\"\r\nimport TodoForm from \"./components/TodoForm\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport useTodo from \"./todo.provider\"\r\nimport TodoGetAllProvider from \"./providers/todo-getAll.provider\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        minWidth: 275,\r\n        padding: theme.spacing(1),\r\n    },\r\n    bullet: {\r\n        display: \"inline-block\",\r\n        margin: \"0 2px\",\r\n        transform: \"scale(0.8)\",\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    appbar: {\r\n        flexGrow: 1,\r\n    },\r\n    appbarTitle: {\r\n        flexGrow: 1,\r\n    },\r\n    todoWrap: {\r\n        position: \"relative\",\r\n    },\r\n    background: {\r\n        background: theme.palette.primary.main,\r\n        width: \"100%\",\r\n        height: theme.spacing(14),\r\n        position: \"absolute\",\r\n        top: 0,\r\n        zIndex: 0,\r\n    },\r\n    containerTodo: {\r\n        position: \"relative\",\r\n        zIndex: 1,\r\n        paddingTop: theme.spacing(2),\r\n    },\r\n    cardHeader: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n    },\r\n    fieldTodo: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(2),\r\n    },\r\n    deleteWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-end\",\r\n    },\r\n}))\r\n\r\nexport interface TodoProps {}\r\n\r\nconst Todo: React.SFC<TodoProps> = () => {\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n    const { handleDelete, todoDeleteState, deleteIdsState, user } = useTodo()\r\n    return (\r\n        <>\r\n            <div className={classes.appbar}>\r\n                <AppBar position='static'>\r\n                    <Toolbar>\r\n                        <IconButton edge='start' className={classes.menuButton} color='inherit' aria-label='menu'>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant='h6' className={classes.appbarTitle}>\r\n                            {user.data.firstName.charAt(0).toUpperCase() + user.data.firstName.substr(1)} Todo's\r\n                        </Typography>\r\n                        <Button\r\n                            color='inherit'\r\n                            onClick={(e: any) => {\r\n                                window.localStorage.removeItem(\"token\")\r\n                                history.push(\"/login\")\r\n                            }}\r\n                        >\r\n                            Log out\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n            <div className={classes.todoWrap}>\r\n                <Container maxWidth='md' className={classes.containerTodo}>\r\n                    <Card className={classes.root}>\r\n                        <CardHeader title='To do List   ' className={classes.cardHeader} />\r\n                        <CardActions className={classes.fieldTodo}>\r\n                            <TodoForm></TodoForm>\r\n                        </CardActions>\r\n                        <CardContent>\r\n                            <TodoGetAllProvider>\r\n                                <TodoTable></TodoTable>\r\n                            </TodoGetAllProvider>\r\n                        </CardContent>\r\n                        <CardActions className={classes.deleteWrapper}>\r\n                            <Button\r\n                                variant='contained'\r\n                                color='secondary'\r\n                                onClick={handleDelete}\r\n                                disabled={!!(todoDeleteState.loading || (deleteIdsState.ids && deleteIdsState.ids?.length === 0))}\r\n                                startIcon={todoDeleteState.loading ? null : <DeleteIcon />}\r\n                            >\r\n                                {todoDeleteState.loading ? \"Loading...\" : \"Delete\"}\r\n                            </Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                </Container>\r\n                <div className={classes.background}></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n"],"sourceRoot":""}